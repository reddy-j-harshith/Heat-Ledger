Users

-> user authentication
-> Maintaining a database of users
-> identification of users

Blockchain specific actions

-> Mine and Broadcast a block for validation,
	so that it can be green-lighted for including in the blockchain
-> A tranaction and broadcast to others in the network
-> Mining a Block (Meeting a target value for finding a nonce and creation of a block)
-> Maintain a difficulty stat for the mining difficulty
-> Gossip the next transactions to the other nodes, so that new txns. can be included in the mempool

Local Database:

-> Linked blockchain copy
-> Wallet
-> Maintaining a mempool of unconfirmed transactions -> Array
-> map[string]Merkle_Node: Merkle_Roots
-> map[string]Transaction: Transactions

Things to consider

-> Bootstrap-based identity storage
-> When a new block is being included to the local copy of the chain,
	compress the hash values of the block when a new block is mined
-> Selection of the transactions
-> Merkle tree making
-> After downloading all the blocks, the blockchain needs to be validated.
-> Extract UTXOs while downloading the chain

Models:

	Struct Block:

		timestamp:
		block_height:
		previous_block_hash:
		block_id: (hash_of_serialized_txns of the block)
		nonce:
		merkle_hash:
		difficulty:

	Struct Transaction

		txn_id: (Double hashing the serialized transaction data)
		timestamp:
		block_hash:
		from: (public key)
		to: (public key)
		amount:
		fee:

	Struct Merkle_Node:
		Value:
		Left: Merkle_Node -> NIL
		Right: Merkle_Node -> NIL

	Making the Merkle Tree:
		1) Taking all the transactions in an array
		2) Create the hash array
		3) Store the transactions into the database:

			map[string]Transaction

		4) Construct the tree by repeatedly concatenating the hashes
		5) Set the left and the right of the nodes to NIL for the leaves
		6) Calculate the hash of the root and store it using a hashmap:

			map[string]Merkle_Node

		7) Add this hash value to the block


		Successful Mining ----
							  \
	 						   |-----> Change mode ----> Onto Block creation
							  /
		Recieve a block ------
